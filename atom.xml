<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烟雨平生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jiachengquan.github.io/"/>
  <updated>2018-09-04T07:56:06.206Z</updated>
  <id>https://jiachengquan.github.io/</id>
  
  <author>
    <name>咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://jiachengquan.github.io/2018/09/04/lambda/"/>
    <id>https://jiachengquan.github.io/2018/09/04/lambda/</id>
    <published>2018-09-04T07:56:06.210Z</published>
    <updated>2018-09-04T07:56:06.206Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;“Lambda 表达式”(lambda expression)是一个匿名函数<br>&emsp;&emsp;Java 8的一个大亮点是引入Lambda表达式，使用它设计的代码会更加简洁。当开发者在编写Lambda表达式时，也会随之被编译成一个函数式接口。<br>&emsp;&emsp;不采用Lambda的老方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Running without Lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用Lambda：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runnable r2 = ()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">"Running from Lambda"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;正如所看到的，使用Lambda表达式不仅让代码变的简单、而且可读、最重要的是代码量也随之减少很多。然而，在某种程度上，这些功能在Scala等这些JVM语言里已经被广泛使用。<a id="more"></a><br>Lambda表达式的语法<br>(parameters) -&gt; expression<br>或<br>(parameters) -&gt;{ statements; }<br>lambda常见写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不传参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 类型参数,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure></p><p><strong>实例：</strong><br>数据准备：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer userId;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Integer weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">buildUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User xiaoming = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"xiaoming"</span>, <span class="number">28</span>, <span class="number">60</span>);</span><br><span class="line">    User xiaohong = <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"xiaohong"</span>, <span class="number">22</span>, <span class="number">60</span>);</span><br><span class="line">    User xiaohuang = <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"xiaohuang"</span>, <span class="number">21</span>, <span class="number">60</span>);</span><br><span class="line">    User xiaolan = <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">"xiaolan"</span>, <span class="number">25</span>, <span class="number">60</span>);</span><br><span class="line">    User xiaoqing = <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">"xiaoqing"</span>, <span class="number">19</span>, <span class="number">60</span>);</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    userList.add(xiaoming);</span><br><span class="line">    userList.add(xiaohong);</span><br><span class="line">    userList.add(xiaohuang);</span><br><span class="line">    userList.add(xiaolan);</span><br><span class="line">    userList.add(xiaoqing);</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环遍历list普通写法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">normalLoopList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user); <span class="comment">// 已重写toString方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环遍历list，lambda写法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lambdaLoopList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//userList.forEach(user -&gt; System.out.println(user)); // 一般写法</span></span><br><span class="line">  userList.forEach(System.out::println); <span class="comment">// 精简写法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list排序普通写法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">normalSortUserByAge</span><span class="params">(List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">  Collections.sort(userList, <span class="keyword">new</span> Comparator&lt;User&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User o1, User o2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  normalLoopList(userList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// list排序lambda写法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lambdaSortUserByAge</span><span class="params">(List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">  Collections.sort(userList, (o1, o2) -&gt; o1.getAge() - o2.getAge());</span><br><span class="line">  lambdaLoopList(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上述例子，lambda表达式可以把代码精简到一行。<br><strong>注：</strong></p><blockquote><p>:: 为java方法引用的标准形式，格式为：类名::方法名，对象::方法名<br>注意是方法名，后面不能加”()”。一般用作lambda表达式  </p></blockquote><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user -&gt; System.out.println(user)  等价于  System.out::println</span><br><span class="line">() -&gt; <span class="keyword">new</span> ArrayList()  等价于  ArrayList::<span class="keyword">new</span></span><br></pre></td></tr></table></figure></p><h2 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h2><p>&emsp;&emsp;标注为FunctionalInterface的接口被称为函数式接口，该接口只能定义一个抽象方法。如果一个接口只有一个方法，则编译器会认为这就是一个函数式接口。增加了 <strong>@FunctionalInterface</strong> 编辑器会进行编译校验。函数式接口要注意以下几点：</p><blockquote><ol><li>有且仅有一个抽象方法</li><li>允许定义default方法，接口中定义default方法为java8新特性</li><li>允许定义静态方法</li><li>允许定义重写从父类Object继承来的方法</li><li>注解不是必须得，加上编译器校验当前接口是否是函数式接口，若不是，则会编译报错</li></ol></blockquote><p><strong>任何可以接受一个函数式接口实例的地方，都可以用Lambda表达式。</strong> <br>上述例子中集合遍历、集合排序的方法源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* List接口中的default方法</span></span><br><span class="line"><span class="comment">* Consumer为java8提供的函数式接口，并使用了<span class="doctag">@FunctionalInterface</span>注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Collections类的静态方法</span></span><br><span class="line"><span class="comment">* Comparator使用了<span class="doctag">@FunctionalInterface</span>注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">    list.sort(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;java8新提供的java.util.Function包下都为使用@FunctionalInterface注解的函数式接口。java8新特性stream也借助lambda及函数式接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;“Lambda 表达式”(lambda expression)是一个匿名函数&lt;br&gt;&amp;emsp;&amp;emsp;Java 8的一个大亮点是引入Lambda表达式，使用它设计的代码会更加简洁。当开发者在编写Lambda表达式时，也会随之被编译成一个函数式接口。&lt;br&gt;&amp;emsp;&amp;emsp;不采用Lambda的老方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Runnable r1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Running without Lambda&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用Lambda：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Runnable r2 = ()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Running from Lambda&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;正如所看到的，使用Lambda表达式不仅让代码变的简单、而且可读、最重要的是代码量也随之减少很多。然而，在某种程度上，这些功能在Scala等这些JVM语言里已经被广泛使用。
    
    </summary>
    
      <category term="java" scheme="https://jiachengquan.github.io/categories/java/"/>
    
    
      <category term="java8" scheme="https://jiachengquan.github.io/tags/java8/"/>
    
      <category term="lambda" scheme="https://jiachengquan.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>First</title>
    <link href="https://jiachengquan.github.io/2018/08/31/first/"/>
    <id>https://jiachengquan.github.io/2018/08/31/first/</id>
    <published>2018-08-30T16:00:00.000Z</published>
    <updated>2018-09-05T12:45:56.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一蓑烟雨任平生"><a href="#一蓑烟雨任平生" class="headerlink" title="一蓑烟雨任平生"></a>一蓑烟雨任平生</h2><p><center><strong>定风波</strong></center></p><p><center>苏轼</center></p><blockquote><p>莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。<br>料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一蓑烟雨任平生&quot;&gt;&lt;a href=&quot;#一蓑烟雨任平生&quot; class=&quot;headerlink&quot; title=&quot;一蓑烟雨任平生&quot;&gt;&lt;/a&gt;一蓑烟雨任平生&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;strong&gt;定风波&lt;/strong&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;cent
      
    
    </summary>
    
      <category term="随笔" scheme="https://jiachengquan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="诗词" scheme="https://jiachengquan.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
